2 == '2' => true (it automatically tries to bring it to common data type)
2 === '2' => false (strict comparison) 

11 != '11' => false (it automatically tries to bring it to common data type)
11 !== '11' => false (strict comparison) 
---------------
var varz = 
{
 "key1" : "value1",
"key2" : "value2",
};
 to access varz.key1 or varz["key1"] tfor both get and set
to remove a key => delete varz.key1

var json_obj = {"a":"b","c":["d","e"]}
var json_obj_copy = JSON.parse(JSON.stringify(json_obj))
-----------------
var arr = []
var i = 0;
while(i < 5)
{
   arr.push(i);
}

var arr2 = []
for(var i=0;i<5;i++)
{
    arr.push(i);
}

var arr3 = [[1,2],[3,4]]
for(var i=0;i<arr3.length;i++)
{
    for(var j=0;j<arr3[i].length;j++)
    {
        console.log(arr3[i][j])
    }
}
----------------------
parseInt("56") => str->int
parseInt("11001",2) => binaryStr -> Int
var num = 15;
var n = num.toString();
------------------------
const ABC = 10; // abc cannot be modified...Read Only
ABC = 11; //will throw error

var abc = 10; // abc can be modified
var abc = 12 //Ok
abc = 13 // Ok

let abc = 10; // abc can be modified
let abc = 12 //throws error
abc = 13 // Ok

let vs var

1) let doesn't allow to redeclare Variables
let name = "abcde"
let name = "zzz" // => this will throw error

var abc = "def"
var abc = "ghi" // => this won't throw error

2) let Doesn't Allow Hoisting
console.log(a);
let a; // => Error raised Uncaught ReferenceError: a is not defined

console.log(a);
var a; // => undefined (not an error)

3) let is block-scoped while var is function scoped
let a = true

if(a){
    let b = 'within if'
    console.log(b) // => prints within if
}
//console.log(b) // => throws error

if(a){
    var c = "inside if"
    console.log(c) // => prints inside if
}
console.log(c) // => prints inside if here as well without error
----------------------------------
backtick 
1) to use placeholders we have to declare strings via backtick
let a = "nikhil"
let b = "sonam"
let sentence = `${a} is a freind of ${b}`
console.log(sentence) // => nikhil is a freind of sonam

2) backtick can be used to declare a string containing both single quotes and double quotes
let strz = `"this is shyam's table"`
console.log(strz) // => "this is shyam's table"
----------------------------------
// To declare constant objects
const MATH_CONSTANT = {
    PI:3.14
}; // this can still be modified

Object.freeze(MATH_CONSTANT) 
// Now MATH_CONSTANT cannot be modified
----------------------------------
const bicycle() = {
    gear:2,
    setGear: function(newGear){
        this.gear = newGear;
    }
};

bicycle.setGear(3);
console.log(bicycle.gear);// => result = 3
--------------------------------
class spaceShuttle
{
    contructor(targetPlanet)
    {
        this.targetPlanet = targetPlanet;
    }
}

var zeus = new spaceShuttle('Jupiter');
console.log(zeus.targetPlanet)
----------------------------------
<Getters and Setters>
_ => private variable
function makeClass()
{
    class Thermostat
    {
        constructor(temp)
        {
              this._temp = 5/9 * (temp - 32); 
        }
        get temperature()
        {
             return this._temp;
        }
        set temperature(updatedTemp)
        {
             this._temp = updatedTemp;
        }
    }
    return Thermostat;
}

const Thermostat = makeClass();
const thermos = new Thermostat(76);
-------------------------------------------

//array methods
let arr = [3, 5, 6, 7]
console.log(arr, typeof(arr)) // => [ 3, 5, 6, 7 ] object

// to convert an array to string as it is
let strz1 = arr.toString()
console.log(strz1, typeof(strz1)) // => 3,5,6,7 string

// to covert an array to string with a delimiter
let strz2 = arr.join("_")
console.log(strz2, typeof(strz2)) // => 3_5_6_7 string

// to create another array with concatenation
let arr2 = arr.concat([11, 14, 17, 19])
console.log(arr2, arr2.length) // => [ 1, <1 empty item>, 6, 7, 11, 14, 17, 19 ] 8

// slice in javascript
let arr3 = arr.slice(1,3)
console.log(arr3, arr3.length) // => [ 5, 6 ] 2

let arr4 = arr.slice(1) // same as pythons arr[1:]
console.log(arr4, arr4.length) // => [ 5, 6, 7 ] 3


// array in place operations
// add an element in array at the end
arr.push(9)
console.log(arr, typeof(arr)) // => [ 3, 5, 6, 7, 9 ] object

// return last element and remove last element in place
let last_ele = arr.pop()
console.log(arr, typeof(arr), last_ele) // => [ 3, 5, 6, 7 ] object 9

// return first element and removes first element in place
let first_ele = arr.shift()
console.log(arr, typeof(arr), first_ele) // => [ 5, 6, 7 ] object 3

// returns new array length and add first element in place
let new_arr_length = arr.unshift(1)
console.log(arr, typeof(arr), new_arr_length) // => [ 1, 5, 6, 7 ] 4

// delete element and replace with empty item
console.log(arr, arr.length) // => [ 1, 5, 6, 7 ] 4
delete(arr[1])
console.log(arr, arr.length) // => [ 1, <1 empty item>, 6, 7 ] 4

// sort array in place alphabetically (internally after convderting to string)
let array = [551, 1, 3, 5, 6, 222] 
array.sort()
console.log(array, array.length) // => [ 1, 222, 3, 5, 551, 6 ] 6

// sort array in place in ascending order using comparator
let comparatorAsc = (a, b) => {
    return a - b
}
array.sort(comparatorAsc)
console.log(array, array.length) // => [ 1, 222, 3, 5, 551, 6 ] 6

// sort array in place in descending order using comparator
let comparatorDesc = (a, b) => {
    return b - a
}
array.sort(comparatorDesc)
console.log(array, array.length) // => [ 551, 222, 6, 5, 3, 1 ] 6

// reverse array in place
array.reverse()
console.log(array, array.length) // => [ 1, 3, 5, 6, 222, 551 ] 6
